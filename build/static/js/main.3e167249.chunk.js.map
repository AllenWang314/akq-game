{"version":3,"sources":["akq_image.png","Rules.js","Room.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Rules","useState","isVisible","setIsVisible","Modal","open","closeOnDimmerClick","trigger","className","onClick","size","Header","icon","content","Content","Button","color","Actions","cards","Room","props","slug","match","params","id","state","gameState","playerNumber","myScore","opponentScore","myCard","opponentCard","roundNumber","modal","myAction","opponentAction","winner","pot","rules","finish","waiting","message","bind","buttonPanel","score","join","handleMessage","handleJoin","handleTurn","handleCards","nextRound","move","finishRound","this","conn","WebSocket","onmessage","messageArray","data","split","messageData","console","log","JSON","parse","type","player_number","action","valid","handleFinish","setState","player_1_card","player_2_card","roundPacket","send","stringify","finishPacket","axios","put","API_URL","headers","then","res","joinPacket","num_clients","turnPacket","result","style","display","Dimmer","active","Loader","to","Icon","name","Component","App","redirect","setRedirect","createGame","post","joinGame","prompt","path","component","render","src","akq_image","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.3e167249.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/akq_image.df786eab.png\";","import React, { useState } from 'react'\nimport { Button, Header, Modal } from 'semantic-ui-react'\n\nexport const Rules = () => {\n\n  const [isVisible, setIsVisible] = useState(false);\n\n  return (\n    <Modal open={isVisible}\n      closeOnDimmerClick={false}\n      trigger={<i className=\"help link icon\" onClick={() => setIsVisible(true)}></i>}\n      size='small'>\n      <Header icon='help' content='Rules of AKQ game' />\n      <Modal.Content>\n        <div className=\"modal-content\">\n\n          <ul>\n            <li> To play, each player starts by paying 1 chip. This is done the beginning of each round</li>\n            <li> Players alternate going first and second</li>\n            <li> The first player has the option of passing (paying 0 chips) or raising (paying 1 chip)</li>\n            <div className=\"button-panel\">\n              <div className=\"column\"><Button>Pass</Button></div>\n              <div className=\"column\"><Button color=\"yellow\">Raise</Button></div>\n            </div>\n            <li> The second player has the option of giving up (losing 1 chip paid at the beginning) or matching what player 1 did (paying 0 chips if\n               player 1 passed or 1 chip if player 1 raised)</li>\n            <div className=\"button-panel\">\n              <div className=\"column\"><Button color=\"red\">Give up</Button></div>\n              <div className=\"column\"><Button color=\"green\">Match</Button></div>\n            </div>\n            <li> If the second player gives up, the first player wins automatically </li>\n            <li> If the second player matches the amount player 1 put in, then the player with the highest card is the winner\n              </li>\n            <li> The winner of each round takes all chips paid in the round, including the chips paid by each player at the start of the round\n              </li>\n            <li> A is higher than K, K is higher than Q, and transitively, A is higher than Q\n              </li>\n          </ul>\n        </div>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button color='purple' onClick={() => setIsVisible(false)}>\n          Exit\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  )\n}\n\n","import React, { Component } from 'react';\nimport { Button, Modal, Header, Dimmer, Loader } from 'semantic-ui-react';\nimport axios from \"axios\";\n// import { NavMenu } from \"./NavMenu\";\nimport './App.css';\nimport { Icon } from 'semantic-ui-react'\nimport { NavLink } from 'react-router-dom';\nimport { Rules } from \"./Rules\";\n\nconst cards = [\"A\", \"K\", \"Q\"]\nconst API_URL = \"https://akq-game-2021.herokuapp.com/api\"\n\nclass Room extends Component {\n    constructor(props) {\n        super(props);\n        const slug = this.props.match.params.id;\n        this.state = {\n            slug: slug,\n            // gameState information\n            // 0 means waiting for player to join\n            // 1 means player 1's turn\n            // 2 means player 2's turn\n            // 3 means final result displayed + update score + next round button appears\n            // 4 is waiting page for both players to hit next round\n            gameState: 0,\n            playerNumber: 0,\n            myScore: 100,\n            opponentScore: 100,\n            myCard: -1,\n            opponentCard: \"\",\n            roundNumber: 0,\n            modal: true,\n            myAction: \"\",\n            opponentAction: \"\",\n            winner: 0,\n            pot: 0,\n            rules: false,\n            finish: 0,\n            waiting: false,\n        }\n        this.message = this.message.bind(this)\n        this.buttonPanel = this.buttonPanel.bind(this)\n        this.score = this.score.bind(this)\n        this.join = this.join.bind(this)\n        this.handleMessage = this.handleMessage.bind(this)\n        this.handleJoin = this.handleJoin.bind(this)\n        this.handleTurn = this.handleTurn.bind(this)\n        this.handleCards = this.handleCards.bind(this)\n        this.nextRound = this.nextRound.bind(this)\n        this.move = this.move.bind(this)\n        this.finishRound = this.finishRound.bind(this)\n    }\n\n    componentDidMount() {\n        this.conn = new WebSocket('wss://akq-game-2021.herokuapp.com/ws');\n        this.conn.onmessage = (message) => {\n            const messageArray = message.data.split(\"\\n\");\n            for (const messageData of messageArray) {\n                console.log(messageData)\n                this.handleMessage(JSON.parse(messageData));\n            }\n        };\n    }\n\n    handleMessage(message) {\n        // filter messages only relevant to current room\n        if (message.slug === this.state.slug) {\n            if (message.type === \"join\") this.handleJoin(message.player_number);\n            else if (message.type === \"turn\") this.handleTurn(message.player_number, message.action);\n            else if (message.type === \"round\" && message.valid) this.handleCards(message);\n            else if (message.type === \"finish\") this.handleFinish(message);\n        }\n    }\n\n    handleFinish(message) {\n        if (this.state.finish + message.player_number === 3) {\n            this.nextRound();\n        } else{\n            this.setState({\n                opponentScore: (this.state.winner !== this.state.playerNumber)? this.state.opponentScore + this.state.pot : this.state.opponentScore,\n                myScore: (this.state.winner === this.state.playerNumber)? this.state.myScore + this.state.pot : this.state.myScore,\n                finish: message.player_number,\n            });   \n        }\n    }\n\n    handleCards(message) {\n        if (this.state.roundNumber === 0) {\n            if (this.state.playerNumber === 1) {\n                this.setState({\n                    roundNumber: 1,\n                    myCard: message.player_1_card,\n                    opponentCard: message.player_2_card,\n                    gameState: 1,\n                    myAction: \"\",\n                    opponentAction: \"\",\n                    myScore: this.state.myScore - 1,\n                    opponentScore: this.state.opponentScore -1,\n                    pot: 2,\n                    finish:0,\n                    waiting: false,\n                    winner:0,\n                })\n            } else {\n                this.setState({\n                    roundNumber: 1,\n                    myCard: message.player_2_card,\n                    opponentCard: message.player_1_card,\n                    gameState: 1,\n                    myAction: \"\",\n                    opponentAction: \"\",\n                    myScore: this.state.myScore - 1,\n                    opponentScore: this.state.opponentScore -1,\n                    pot: 2,\n                    finish:0,\n                    waiting: false,\n                    winner:0,\n                })\n            }\n        } else {\n            if (this.state.playerNumber === 1) {\n                this.setState({\n                    roundNumber: this.state.roundNumber + 1,\n                    playerNumber: this.state.playerNumber % 2 + 1,\n                    myCard: message.player_2_card,\n                    opponentCard: message.player_1_card,\n                    gameState: 1,\n                    myAction: \"\",\n                    opponentAction: \"\",\n                    myScore: this.state.myScore - 1,\n                    opponentScore: this.state.opponentScore -1,\n                    pot: 2,\n                    finish:0,\n                    waiting: false,\n                    winner:0,\n                })\n            } else {\n                this.setState({\n                    roundNumber: this.state.roundNumber + 1,\n                    playerNumber: this.state.playerNumber % 2 + 1,\n                    myCard: message.player_1_card,\n                    opponentCard: message.player_2_card,\n                    gameState: 1,\n                    myAction: \"\",\n                    opponentAction: \"\",\n                    myScore: this.state.myScore - 1,\n                    opponentScore: this.state.opponentScore -1,\n                    pot: 2,\n                    finish:0,\n                    waiting: false,\n                    winner:0,\n                })\n            }\n        }\n    }\n\n    handleJoin(playerNumber) {\n        if (playerNumber === 2) {\n            this.nextRound()\n        }\n    }\n\n    handleTurn(playerNumber, action) {\n        if (this.state.playerNumber === 1) {\n            if (playerNumber === 1) {\n                this.setState({\n                    gameState: 2,\n                    myAction: action,\n                    pot: (action === \"raise\")? this.state.pot + 1 : this.state.pot,\n                    myScore: (action === \"raise\")? this.state.myScore - 1 : this.state.myScore,\n                })\n            } else if (playerNumber === 2) {\n                this.setState({\n                    gameState: 3,\n                    opponentAction: action,\n                    opponentScore: (action === \"match\" && this.state.pot === 3)? this.state.opponentScore - 1 : this.state.opponentScore,\n                    pot: (action === \"match\" && this.state.pot === 3)? this.state.pot + 1 : this.state.pot,\n                    winner: (this.state.myCard < this.state.opponentCard || action === \"give up\") ? 1 : 2\n                })\n            }\n        } else if (this.state.playerNumber === 2) {\n            if (playerNumber === 1) {\n                this.setState({\n                    gameState: 2,\n                    opponentAction: action,\n                    opponentScore: (action === \"raise\")? this.state.opponentScore - 1 : this.state.opponentScore,\n                    pot: (action === \"raise\")? this.state.pot + 1 : this.state.pot,\n                })\n            } else if (playerNumber === 2) {\n                this.setState({\n                    gameState: 3,\n                    myAction: action,\n                    myScore: (action === \"match\" && this.state.pot === 3)? this.state.myScore - 1 : this.state.myScore,\n                    pot: (action === \"match\" && this.state.pot === 3)? this.state.pot + 1 : this.state.pot,\n                    winner: (this.state.myCard > this.state.opponentCard || action === \"give up\") ? 1 : 2\n                })\n            }\n        }\n    }\n\n    nextRound() {\n        let roundPacket = {\n            type: 'round',\n            player_number: this.state.playerNumber,\n            slug: this.state.slug\n        };\n\n        // Connected to remote\n        this.conn.send(JSON.stringify(roundPacket));\n    }\n\n    finishRound() {\n        let finishPacket = {\n            type: 'finish',\n            player_number: this.state.playerNumber,\n            slug: this.state.slug\n        };\n\n        // Connected to remote\n        this.conn.send(JSON.stringify(finishPacket));\n        this.setState({\n            waiting: true\n        })\n    }\n\n    join() {\n        axios.put(API_URL + \"/rooms/join/\" + this.state.slug,\n            {},\n            {\n                headers: { \"Access-Control-Allow-Origin\": \"*\" }\n            }).then((res) => {\n                let joinPacket = {\n                    type: 'join',\n                    player_number: res.data.num_clients,\n                    slug: this.state.slug\n                };\n\n                // Connected to remote\n                this.conn.send(JSON.stringify(joinPacket));\n\n                this.setState({\n                    playerNumber: res.data.num_clients,\n                    modal: false\n                })\n            })\n    }\n\n    move(action) {\n        let turnPacket = {\n            type: 'turn',\n            player_number: this.state.playerNumber,\n            slug: this.state.slug,\n            action: action\n        };\n\n        // Connected to remote\n        this.conn.send(JSON.stringify(turnPacket));\n        this.setState({\n            gameState: this.state.gameState + 1\n        })\n    }\n\n    message() {\n        if (this.state.myCard === -1 || this.state.waiting) {\n            return (\n                <div />\n            )\n        } else {\n            return (\n                <div className=\"round\">\n                    Round {this.state.roundNumber}: You have been dealt {cards[this.state.myCard]}\n                </div>\n            )\n        }\n    }\n\n    result() {\n        if (this.state.playerNumber === 1 || this.state.playerNumber === 2) {\n            return (\n                <div className=\"result\">\n                    <div className=\"result-header\">Results:</div>\n                    <div className=\"result-bit\">Your card: {cards[this.state.myCard]}, Opponent's card: {cards[this.state.opponentCard]}</div>\n                    <div className=\"result-bit\">Your action: {this.state.myAction}, Opponent's action: {this.state.opponentAction}</div>\n                    <div className=\"result-bit\">You win {(this.state.winner === this.state.playerNumber)? this.state.pot : 0}</div>\n                    <div className=\"finish-button\"><Button size=\"large\" onClick={this.finishRound}>Next Round</Button></div>\n                </div>\n            )\n        } else {\n            return (\n                <div />\n            )\n        }\n        \n    }\n\n    buttonPanel() {\n        if (this.state.waiting) {\n            return (\n                <div className=\"message\">\n                    Waiting for opponent...\n                </div>\n            )\n        }\n        if (this.state.gameState === 3) {\n            return this.result()\n        }\n        if (this.state.playerNumber === 1) {\n            if (this.state.gameState === 1) {\n                return (\n                    <div>\n                        <div className=\"message\"> It's your turn! </div>\n                        <div className=\"button-panel\">\n                            <div className=\"column\"><Button size=\"large\" onClick={() => { this.move('pass') }}>Pass</Button></div>\n                            <div className=\"column\"><Button size=\"large\" color=\"yellow\" onClick={() => { this.move('raise') }}>Raise</Button></div>\n                        </div>\n                    </div>\n                )\n            } else if (this.state.gameState === 2) {\n                return (\n                    <div className=\"message\">\n                        Action taken: {this.state.myAction}. Waiting for opponent...\n                    </div>\n                )\n            } else {\n                return (\n                    <div className=\"message\">\n                        Waiting for opponent...\n                    </div>\n                )\n            }\n        } else if (this.state.playerNumber === 2) {\n            if (this.state.gameState === 2) {\n                return (\n                    <div>\n                        <div className=\"message\"> Opponent chose to {this.state.opponentAction}, now it's your turn! </div>\n                        <div className=\"button-panel\">\n                            <div className=\"column\"><Button size=\"large\" color=\"red\" onClick={() => { this.move('give up') }}>Give up</Button></div>\n                            <div className=\"column\"><Button size=\"large\" color=\"green\" onClick={() => { this.move('match') }}>Match</Button></div>\n                        </div>\n                    </div>\n                )\n            } else {\n                return (\n                    <div className=\"message\">\n                        Waiting for opponent...\n                    </div>\n                )\n            }\n        } else {\n            return (\n                <div />\n            )\n        }\n    }\n\n    score() {\n        if (this.state.playerNumber === 1 || this.state.playerNumber === 2) {\n            return (\n                <div className=\"scoreboard\">\n                    <div className=\"score\">\n                        Your score: {this.state.myScore}\n                    </div>\n                    <div className=\"score\">\n                        Opponent's score: {this.state.opponentScore}\n                    </div>\n                </div>\n            )\n        } else if (this.state.playerNumber === 0) {\n            return (\n                <div style={{ display: this.state.modal ? \"none\" : \"block\" }}>\n                    <Dimmer active>\n                        <Loader />\n                    </Dimmer>\n                Loading ...\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    Room at capacity. Please create another game.\n                </div>\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <div className=\"menu\" id=\"navbar\">\n                    <div className=\"nav-menu\">\n                        <div id=\"home-nav\">\n                            <NavLink to=\"/\" style = {{color: \"white\"}}> <Icon name='home'/> </NavLink>\n                        </div>\n                        <div id = \"rule-nav\">\n                            <Rules />\n                        </div>\n                    </div>\n                    </div>\n                    {this.message()}\n                    {this.buttonPanel()}\n                    {this.score()}\n                    <div className=\"game-code\">\n                        Game code is: {this.state.slug}\n                    </div>\n                </header>\n                <Modal\n                    size='small'\n                    closeOnDimmerClick={false}\n                    open={this.state.modal}\n                >\n                    <Header icon='gamepad' content='Join Game' />\n                    <Modal.Content>\n                        <div className=\"modal-content\">\n                            <p>\n                                Welcome to the AKQ game! Below are some tips to guide you:\n                            </p>\n\n                            <ul>\n                                <li>On the top of the page, there will be a help button\n                                containing the rules should you need it. </li>\n                                <li> Your game code is {this.state.slug} </li>\n                                <li> Only share the game code with one other person. </li>\n                                <li>Never refresh or press back; all progress will be lost. </li>\n                                <li> There may be lag at times so please be patient. </li>\n                                <li> If the site breaks down or is taking too long, both players should exit and create a new game. </li>\n                                <li> Since it costs 1 chip to play, 1 chip is deducted from both player's scores at the start of each round. </li>\n                                <li>The player going first sees the following buttons: </li>\n                                <div className=\"button-panel\">\n                                    <div className=\"column\"><Button>Pass</Button></div>\n                                    <div className=\"column\"><Button color=\"yellow\">Raise</Button></div>\n                                </div>\n                                <li>The player going second sees the following buttons:</li>\n                                <div className=\"button-panel\">\n                                    <div className=\"column\"><Button color=\"red\">Give up</Button></div>\n                                    <div className=\"column\"><Button color=\"green\">Match</Button></div>\n                                </div>\n                            </ul>\n                        </div>\n\n                    </Modal.Content>\n                    <Modal.Actions>\n\n                        <Button color='purple' onClick={this.join}>\n                            Join\n                </Button>\n                    </Modal.Actions>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nexport default Room;","import React, { useState } from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Room from \"./Room\";\n// import { NavMenu } from \"./NavMenu\";\nimport './App.css';\nimport akq_image from './akq_image.png';\nimport { Icon } from 'semantic-ui-react'\nimport { NavLink } from 'react-router-dom';\nimport { Rules } from \"./Rules\";\n\nconst API_URL = \"https://akq-game-2021.herokuapp.com/api\"\n\nexport const App = () => {\n\n  const [redirect, setRedirect] = useState(null)\n  // const [modal, setModal] = useState(false)\n\n  const createGame = () => {\n    axios.post(API_URL + \"/rooms\",\n      { \"num_clients\": 0 },\n      {\n        headers: { \"Access-Control-Allow-Origin\": \"*\" }\n      }).then(res => {\n        setRedirect(\"/room/\" + res.data.slug)\n      })\n  }\n\n  const joinGame = () => {\n    let slug = prompt(\"Enter room code:\")\n    if (slug !== null) {\n      setRedirect(\"/room/\" + slug)\n    } else {\n      setRedirect(\"/\")\n    }\n  }\n\n  return (\n    <BrowserRouter>\n      {redirect && <Redirect to={redirect} />}\n      <main className=\"content-container\">\n        <Switch>\n          <Route path=\"/room/:id\" component={Room} />\n          <Route path=\"/fail\" render={() => { }} />\n          <Route path=\"/\" render={() => {\n            return (\n              <div className=\"App\">\n                <header className=\"App-header\">\n                  <div className=\"menu\" id=\"navbar\">\n                  <div className=\"nav-menu\">\n                        <div id=\"home-nav\">\n                            <NavLink to=\"/\" style = {{color: \"white\"}}> <Icon name='home'/> </NavLink>\n                        </div>\n                        <div id = \"rule-nav\">\n                            <Rules />\n                        </div>\n                    </div>\n                  </div>\n                  <div>\n                    <h1>AKQ</h1>\n                    <h2>A 2-player, 3-card, betting game</h2>\n                  </div>\n                    <img className=\"akq-image\" src={akq_image}/>\n                  <div className=\"directions\">\n                    The AKQ game is a game that involves a deck containing exactly three cards the ace (A), the king (K), and the queen (Q). To learn the rules, click the question mark icon. To return to this page, click the home icon. To begin game play, create a game below and share the game code or link with another player. To join a game, click the join game button.\n                  </div>\n                  <div className=\"home-buttons\">\n                    <div className = \"flex-button\">\n                      <Button size=\"large\" onClick={createGame}>Create Game</Button>\n                    </div>\n                    <div className = \"flex-button\">\n                      <Button size=\"large\" onClick={joinGame}>Join Game</Button>\n                    </div>\n                  </div>\n                </header>\n              </div>\n            );\n          }} />\n        </Switch>\n      </main>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}