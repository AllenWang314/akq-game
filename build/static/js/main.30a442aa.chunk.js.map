{"version":3,"sources":["Rules.js","Room.js","App.js","serviceWorker.js","index.js"],"names":["Rules","props","state","showModal","close","bind","console","log","this","setState","Modal","open","closeOnDimmerClick","trigger","className","onClick","size","Header","icon","content","Content","Button","color","Actions","Component","cards","Room","slug","match","params","id","gameState","playerNumber","myScore","opponentScore","myCard","opponentCard","roundNumber","modal","myAction","opponentAction","winner","pot","rules","finish","waiting","message","buttonPanel","score","join","handleMessage","handleJoin","handleTurn","handleCards","nextRound","move","finishRound","conn","WebSocket","onmessage","JSON","parse","data","type","player_number","action","Valid","handleFinish","Player1Card","Player2Card","roundPacket","send","stringify","finishPacket","axios","put","api","headers","then","res","joinPacket","num_clients","turnPacket","result","style","display","Dimmer","active","Loader","App","redirect","createGame","joinGame","post","prompt","to","path","component","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.30a442aa.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Button, Header, Modal } from 'semantic-ui-react'\n\nclass Rules extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showModal: false\n    }\n    this.close = this.close.bind(this)\n  }\n\n  close() {\n    console.log(\"close clicked\")\n    this.setState({showModal: false})\n  }\n\n  render() {\n    return (\n      <Modal open={this.state.showModal} \n        closeOnDimmerClick={false} \n        trigger={<i className=\"help link icon\" onClick={() => this.setState({ showModal: true })}></i>} \n        size='small'>\n        <Header icon='help' content='Rules of AKQ game' />\n        <Modal.Content>\n          <div className=\"modal-content\">\n\n          <ul>\n              <li> To play, each player starts by paying 1 chip. This is done the beginning of each round.</li>\n              <li> Players alternate going first and second.</li>\n              <li> The first player has the option of passing (paying 0 chips) or raising (paying 1 chip).</li>\n              <div className=\"button-panel\">\n                  <div className=\"column\"><Button>Pass</Button></div>\n                  <div className=\"column\"><Button color=\"yellow\">Raise</Button></div>\n              </div>\n             <li> The second player has the option of giving up (losing 1 chip paid at the beginning) or matching what player 1 did (paying 0 chips if \n               player 1 passed or 1 chip if player 1 raised).</li>\n              <div className=\"button-panel\">\n                  <div className=\"column\"><Button color=\"red\">Give up</Button></div>\n                  <div className=\"column\"><Button color=\"green\">Match</Button></div>\n              </div>\n              <li> If the second player gives up, the first player wins automatically. </li>\n              <li> If the second player matches the amount player 1 put in, then the player with the highest card is the winner.\n              </li>\n              <li> The winner of each round takes all chips paid in the round, including the chips paid by each player at the start of the round.\n              </li>\n              <li> A is higher than K, K is higher than Q, and transitively, A is higher than Q.\n              </li>\n          </ul>\n          </div>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button color='purple' onClick={this.close}>\n            Exit\n        </Button>\n        </Modal.Actions>\n      </Modal>\n    )\n  }\n}\n\nexport default Rules","import React, { Component } from 'react';\nimport { Button, Modal, Header, Dimmer, Loader } from 'semantic-ui-react';\nimport axios from \"axios\";\n\nimport Rules from \"./Rules\";\n\nimport './App.css';\n\nconst api = \"https://akq-game.herokuapp.com/api/\"\nconst cards = [\"A\", \"K\", \"Q\"]\n\nclass Room extends Component {\n    constructor(props) {\n        super(props);\n        const slug = this.props.match.params.id;\n        this.state = {\n            slug: slug,\n            // gameState information\n            // 0 means waiting for player to join\n            // 1 means player 1's turn\n            // 2 means player 2's turn\n            // 3 means final result displayed + update score + next round button appears\n            // 4 is waiting page for both players to hit next round\n            gameState: 0,\n            playerNumber: 0,\n            myScore: 100,\n            opponentScore: 100,\n            myCard: -1,\n            opponentCard: \"\",\n            roundNumber: 0,\n            modal: true,\n            myAction: \"\",\n            opponentAction: \"\",\n            winner: 0,\n            pot: 0,\n            rules: false,\n            finish: 0,\n            waiting: false,\n        }\n        this.message = this.message.bind(this)\n        this.buttonPanel = this.buttonPanel.bind(this)\n        this.score = this.score.bind(this)\n        this.join = this.join.bind(this)\n        this.handleMessage = this.handleMessage.bind(this)\n        this.handleJoin = this.handleJoin.bind(this)\n        this.handleTurn = this.handleTurn.bind(this)\n        this.handleCards = this.handleCards.bind(this)\n        this.nextRound = this.nextRound.bind(this)\n        this.move = this.move.bind(this)\n        this.finishRound = this.finishRound.bind(this)\n    }\n\n    componentDidMount() {\n        this.conn = new WebSocket('wss://akq-game.herokuapp.com/ws');\n        this.conn.onmessage = (message) => {\n            this.handleMessage(JSON.parse(message.data));\n        };\n    }\n\n    handleMessage(message) {\n        // filter messages only relevant to current room\n        if (message.slug === this.state.slug) {\n            if (message.type === \"join\") this.handleJoin(message.player_number);\n            else if (message.type === \"turn\") this.handleTurn(message.player_number, message.action);\n            else if (message.type === \"round\" && message.Valid) this.handleCards(message);\n            else if (message.type === \"finish\") this.handleFinish(message);\n        }\n    }\n\n    handleFinish(message) {\n        if (this.state.finish + message.player_number === 3) {\n            this.nextRound();\n        } else{\n            this.setState({\n                opponentScore: (this.state.winner !== this.state.playerNumber)? this.state.opponentScore + this.state.pot : this.state.opponentScore,\n                myScore: (this.state.winner === this.state.playerNumber)? this.state.myScore + this.state.pot : this.state.myScore,\n                finish: message.player_number,\n            });   \n        }\n    }\n\n    handleCards(message) {\n        if (this.state.roundNumber === 0) {\n            if (this.state.playerNumber === 1) {\n                this.setState({\n                    roundNumber: 1,\n                    myCard: message.Player1Card,\n                    opponentCard: message.Player2Card,\n                    gameState: 1,\n                    myAction: \"\",\n                    opponentAction: \"\",\n                    myScore: this.state.myScore - 1,\n                    opponentScore: this.state.opponentScore -1,\n                    pot: 2,\n                    finish:0,\n                    waiting: false,\n                    winner:0,\n                })\n            } else {\n                this.setState({\n                    roundNumber: 1,\n                    myCard: message.Player2Card,\n                    opponentCard: message.Player1Card,\n                    gameState: 1,\n                    myAction: \"\",\n                    opponentAction: \"\",\n                    myScore: this.state.myScore - 1,\n                    opponentScore: this.state.opponentScore -1,\n                    pot: 2,\n                    finish:0,\n                    waiting: false,\n                    winner:0,\n                })\n            }\n        } else {\n            if (this.state.playerNumber === 1) {\n                this.setState({\n                    roundNumber: this.state.roundNumber + 1,\n                    playerNumber: this.state.playerNumber % 2 + 1,\n                    myCard: message.Player2Card,\n                    opponentCard: message.Player1Card,\n                    gameState: 1,\n                    myAction: \"\",\n                    opponentAction: \"\",\n                    myScore: this.state.myScore - 1,\n                    opponentScore: this.state.opponentScore -1,\n                    pot: 2,\n                    finish:0,\n                    waiting: false,\n                    winner:0,\n                })\n            } else {\n                this.setState({\n                    roundNumber: this.state.roundNumber + 1,\n                    playerNumber: this.state.playerNumber % 2 + 1,\n                    myCard: message.Player1Card,\n                    opponentCard: message.Player2Card,\n                    gameState: 1,\n                    myAction: \"\",\n                    opponentAction: \"\",\n                    myScore: this.state.myScore - 1,\n                    opponentScore: this.state.opponentScore -1,\n                    pot: 2,\n                    finish:0,\n                    waiting: false,\n                    winner:0,\n                })\n            }\n        }\n    }\n\n    handleJoin(playerNumber) {\n        if (playerNumber === 2) {\n            this.nextRound()\n        }\n    }\n\n    handleTurn(playerNumber, action) {\n        if (this.state.playerNumber === 1) {\n            if (playerNumber === 1) {\n                this.setState({\n                    gameState: 2,\n                    myAction: action,\n                    pot: (action === \"raise\")? this.state.pot + 1 : this.state.pot,\n                    myScore: (action === \"raise\")? this.state.myScore - 1 : this.state.myScore,\n                })\n            } else if (playerNumber === 2) {\n                this.setState({\n                    gameState: 3,\n                    opponentAction: action,\n                    opponentScore: (action === \"match\" && this.state.pot === 3)? this.state.opponentScore - 1 : this.state.opponentScore,\n                    pot: (action === \"match\" && this.state.pot === 3)? this.state.pot + 1 : this.state.pot,\n                    winner: (this.state.myCard < this.state.opponentCard || action === \"give up\") ? 1 : 2\n                })\n            }\n        } else if (this.state.playerNumber === 2) {\n            if (playerNumber === 1) {\n                this.setState({\n                    gameState: 2,\n                    opponentAction: action,\n                    opponentScore: (action === \"raise\")? this.state.opponentScore - 1 : this.state.opponentScore,\n                    pot: (action === \"raise\")? this.state.pot + 1 : this.state.pot,\n                })\n            } else if (playerNumber === 2) {\n                this.setState({\n                    gameState: 3,\n                    myAction: action,\n                    myScore: (action === \"match\" && this.state.pot === 3)? this.state.myScore - 1 : this.state.myScore,\n                    pot: (action === \"match\" && this.state.pot === 3)? this.state.pot + 1 : this.state.pot,\n                    winner: (this.state.myCard > this.state.opponentCard || action === \"give up\") ? 1 : 2\n                })\n            }\n        }\n    }\n\n    nextRound() {\n        let roundPacket = {\n            type: 'round',\n            player_number: this.state.playerNumber,\n            slug: this.state.slug\n        };\n\n        // Connected to remote\n        this.conn.send(JSON.stringify(roundPacket));\n    }\n\n    finishRound() {\n        let finishPacket = {\n            type: 'finish',\n            player_number: this.state.playerNumber,\n            slug: this.state.slug\n        };\n\n        // Connected to remote\n        this.conn.send(JSON.stringify(finishPacket));\n        this.setState({\n            waiting: true\n        })\n    }\n\n    join() {\n        axios.put(api + \"rooms/join/\" + this.state.slug,\n            {},\n            {\n                headers: { \"Access-Control-Allow-Origin\": \"*\" }\n            }).then((res) => {\n                let joinPacket = {\n                    type: 'join',\n                    player_number: res.data.num_clients,\n                    slug: this.state.slug\n                };\n\n                // Connected to remote\n                this.conn.send(JSON.stringify(joinPacket));\n\n                this.setState({\n                    playerNumber: res.data.num_clients,\n                    modal: false\n                })\n            })\n    }\n\n    move(action) {\n        let turnPacket = {\n            type: 'turn',\n            player_number: this.state.playerNumber,\n            slug: this.state.slug,\n            action: action\n        };\n\n        // Connected to remote\n        this.conn.send(JSON.stringify(turnPacket));\n        this.setState({\n            gameState: this.state.gameState + 1\n        })\n    }\n\n    message() {\n        if (this.state.myCard === -1 || this.state.waiting) {\n            return (\n                <div />\n            )\n        } else {\n            return (\n                <div className=\"round\">\n                    Round {this.state.roundNumber}: You have been dealt {cards[this.state.myCard]}\n                </div>\n            )\n        }\n    }\n\n    result() {\n        if (this.state.playerNumber === 1 || this.state.playerNumber === 2) {\n            return (\n                <div className=\"result\">\n                    <div className=\"result-header\">Results:</div>\n                    <div className=\"result-bit\">Your card: {cards[this.state.myCard]}, Opponent's card: {cards[this.state.opponentCard]}</div>\n                    <div className=\"result-bit\">Your action: {this.state.myAction}, Opponent's action: {this.state.opponentAction}</div>\n                    <div className=\"result-bit\">You win {(this.state.winner === this.state.playerNumber)? this.state.pot : 0}</div>\n                    <div className=\"finish-button\"><Button size=\"large\" onClick={this.finishRound}>Next Round</Button></div>\n                </div>\n            )\n        } else {\n            return (\n                <div />\n            )\n        }\n        \n    }\n\n    buttonPanel() {\n        if (this.state.waiting) {\n            return (\n                <div className=\"message\">\n                    Waiting for opponent...\n                </div>\n            )\n        }\n        if (this.state.gameState === 3) {\n            return this.result()\n        }\n        if (this.state.playerNumber === 1) {\n            if (this.state.gameState === 1) {\n                return (\n                    <div>\n                        <div className=\"message\"> It's your turn! </div>\n                        <div className=\"button-panel\">\n                            <div className=\"column\"><Button size=\"large\" onClick={() => { this.move('pass') }}>Pass</Button></div>\n                            <div className=\"column\"><Button size=\"large\" color=\"yellow\" onClick={() => { this.move('raise') }}>Raise</Button></div>\n                        </div>\n                    </div>\n                )\n            } else if (this.state.gameState === 2) {\n                return (\n                    <div className=\"message\">\n                        Action taken: {this.state.myAction}. Waiting for opponent...\n                    </div>\n                )\n            } else {\n                return (\n                    <div className=\"message\">\n                        Waiting for opponent...\n                    </div>\n                )\n            }\n        } else if (this.state.playerNumber === 2) {\n            if (this.state.gameState === 2) {\n                return (\n                    <div>\n                        <div className=\"message\"> Opponent chose to {this.state.opponentAction}, now it's your turn! </div>\n                        <div className=\"button-panel\">\n                            <div className=\"column\"><Button size=\"large\" color=\"red\" onClick={() => { this.move('give up') }}>Give up</Button></div>\n                            <div className=\"column\"><Button size=\"large\" color=\"green\" onClick={() => { this.move('match') }}>Match</Button></div>\n                        </div>\n                    </div>\n                )\n            } else {\n                return (\n                    <div className=\"message\">\n                        Waiting for opponent...\n                    </div>\n                )\n            }\n        } else {\n            return (\n                <div />\n            )\n        }\n    }\n\n    score() {\n        if (this.state.playerNumber === 1 || this.state.playerNumber === 2) {\n            return (\n                <div className=\"scoreboard\">\n                    <div className=\"score\">\n                        Your score: {this.state.myScore}\n                    </div>\n                    <div className=\"score\">\n                        Opponent's score: {this.state.opponentScore}\n                    </div>\n                </div>\n            )\n        } else if (this.state.playerNumber === 0) {\n            return (\n                <div style={{ display: this.state.modal ? \"none\" : \"block\" }}>\n                    <Dimmer active>\n                        <Loader />\n                    </Dimmer>\n                Loading ...\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    Room at capacity. Please create another game.\n                </div>\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <div className=\"menu\" id=\"navbar\">\n                        <Rules />\n                    </div>\n                    {this.message()}\n                    {this.buttonPanel()}\n                    {this.score()}\n                    <div className=\"game-code\">\n                        Game code is: {this.state.slug}\n                    </div>\n                </header>\n                <Modal\n                    size='small'\n                    closeOnDimmerClick={false}\n                    open={this.state.modal}\n                >\n                    <Header icon='gamepad' content='Join Game' />\n                    <Modal.Content>\n                        <div className=\"modal-content\">\n                            <p>\n                                Welcome to the AKQ game! Below are some tips to guide you:\n                            </p>\n\n                            <ul>\n                                <li>On the top of the page, there will be a help button\n                                containing the rules should you need it. </li>\n                                <li> Your game code is {this.state.slug} </li>\n                                <li> Only share the game code with one other person. </li>\n                                <li>Never refresh or press back; all progress will be lost. </li>\n                                <li> There may be lag at times so please be patient. </li>\n                                <li> If the site breaks down or is taking too long, both players should exit and create a new game. </li>\n                                <li> Since it costs 1 chip to play, 1 chip is deducted from both player's scores at the start of each round. </li>\n                                <li>The player going first sees the following buttons: </li>\n                                <div className=\"button-panel\">\n                                    <div className=\"column\"><Button>Pass</Button></div>\n                                    <div className=\"column\"><Button color=\"yellow\">Raise</Button></div>\n                                </div>\n                                <li>The player going second sees the following buttons:</li>\n                                <div className=\"button-panel\">\n                                    <div className=\"column\"><Button color=\"red\">Give up</Button></div>\n                                    <div className=\"column\"><Button color=\"green\">Match</Button></div>\n                                </div>\n                            </ul>\n                        </div>\n\n                    </Modal.Content>\n                    <Modal.Actions>\n\n                        <Button color='purple' onClick={this.join}>\n                            Join\n                </Button>\n                    </Modal.Actions>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nexport default Room;\n","import React, { Component } from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport axios from \"axios\";\n\nimport Room from \"./Room\";\n\nimport './App.css';\n\nconst api = \"https://akq-game.herokuapp.com/api\"\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      redirect: null,\n      modal: false,\n    }\n    this.createGame = this.createGame.bind(this)\n    this.joinGame = this.joinGame.bind(this)\n  }\n\n  createGame() {\n    axios.post(api + \"/rooms\",\n      { \"num_clients\": 0 },\n      { headers: { \"Access-Control-Allow-Origin\": \"*\" }\n    }).then((res) => {\n      this.setState({\n        redirect: \"/room/\" + res.data.slug\n      });\n    })\n  }\n\n  joinGame() {\n    let slug = prompt(\"Enter room code:\")\n    if (slug !== null) {\n      this.setState({\n        redirect: \"/room/\" + slug\n      });\n    } else {\n      this.setState({\n        redirect: \"/\"\n      });\n    }\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        {this.state.redirect && <Redirect to={this.state.redirect} />}\n        <main className=\"content-container\">\n          <Switch>\n            <Route path=\"/room/:id\" component={Room} />\n            <Route path=\"/fail\" render={() => {}} />\n            <Route path=\"/\" render={() => {return (\n              <div className=\"App\">\n                <header className=\"App-header\">\n                  <div className=\"button-panel\">\n                    <Button size=\"large\" onClick = {this.createGame}>Create Game</Button>\n                    <Button size=\"large\" onClick = {this.joinGame}>Join Game</Button>\n                  </div>\n                </header>\n              </div>\n            );}} />\n          </Switch>\n        </main>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}